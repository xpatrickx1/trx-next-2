export const handleTransactionErrorV2 = (
    error: any,
    stage: "build" | "sign",
    SendFrontendPing: (event: string, msg: string) => void
): string => {
    let userMessage = "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    let technicalLog = `‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${stage === "build" ? "—Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" : "–ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"}`;

    try {
        if (!error) {
            technicalLog += " ‚Äî error is null/undefined";
            SendFrontendPing("ERROR", technicalLog);
            return userMessage;
        }

        const message = error?.message || "";
        const code = error?.code || "";
        const name = error?.name || "";

        // --- –û—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        if (stage === "build") {
            if (message.includes("INVALID_ADDRESS")) {
                userMessage = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.";
                technicalLog += " ‚Äî –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å";
            } else if (message.includes("insufficient balance")) {
                userMessage = "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ.";
                technicalLog += " ‚Äî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤";
            } else {
                userMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.";
                technicalLog += ` ‚Äî ${message}`;
            }
        }

        // --- –û—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        if (stage === "sign") {
            if (message.includes("User rejected") || message.includes("user rejected") || code === 4001) {
                userMessage = "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.";
                technicalLog += " ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—å";
            } else if (message.includes("No active session")) {
                userMessage = "‚ö†Ô∏è –°–µ—Å—Å–∏—è WalletConnect –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –∑–∞–Ω–æ–≤–æ.";
                technicalLog += " ‚Äî WalletConnect session expired";
            } else if (message.includes("signTransaction is not a function")) {
                userMessage = "üö´ –ú–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Trust Wallet.";
                technicalLog += " ‚Äî –ú–µ—Ç–æ–¥ signTransaction –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
            } else if (message.includes("Unsupported network")) {
                userMessage = "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ TRON.";
                technicalLog += " ‚Äî Unsupported chain";
            } else {
                userMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.";
                technicalLog += ` ‚Äî ${message}`;
            }
        }

        SendFrontendPing("ERROR", technicalLog);
    } catch (internalError) {
        SendFrontendPing("ERROR", `Error inside handleTransactionError: ${internalError}`);
    }

    return userMessage;
};

export const handleTransactionError = (
    error: any,
    stage: "build" | "sign",
    SendToTelegram: (msg: string, silent: number) => void
): string => {
    let userMessage = "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    let technicalLog = `‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${stage === "build" ? "—Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" : "–ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"}`;

    try {
        if (!error) {
            technicalLog += " ‚Äî error is null/undefined";
            SendToTelegram(technicalLog, 0);
            return userMessage;
        }

        const message = error?.message || "";
        const code = error?.code || "";
        const name = error?.name || "";

        // --- –û—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        if (stage === "build") {
            if (message.includes("INVALID_ADDRESS")) {
                userMessage = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.";
                technicalLog += " ‚Äî –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å";
            } else if (message.includes("insufficient balance")) {
                userMessage = "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ.";
                technicalLog += " ‚Äî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤";
            } else {
                userMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.";
                technicalLog += ` ‚Äî ${message}`;
            }
        }

        // --- –û—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        if (stage === "sign") {
            if (message.includes("User rejected") || message.includes("user rejected") || code === 4001) {
                userMessage = "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.";
                technicalLog += " ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—å";
            } else if (message.includes("No active session")) {
                userMessage = "‚ö†Ô∏è –°–µ—Å—Å–∏—è WalletConnect –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –∑–∞–Ω–æ–≤–æ.";
                technicalLog += " ‚Äî WalletConnect session expired";
            } else if (message.includes("signTransaction is not a function")) {
                userMessage = "üö´ –ú–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Trust Wallet.";
                technicalLog += " ‚Äî –ú–µ—Ç–æ–¥ signTransaction –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
            } else if (message.includes("Unsupported network")) {
                userMessage = "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ TRON.";
                technicalLog += " ‚Äî Unsupported chain";
            } else {
                userMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.";
                technicalLog += ` ‚Äî ${message}`;
            }
        }

        SendToTelegram(technicalLog, 0);
    } catch (internalError) {
        SendToTelegram(`‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ handleTransactionError: ${internalError}`, 0);
    }

    return userMessage;
};